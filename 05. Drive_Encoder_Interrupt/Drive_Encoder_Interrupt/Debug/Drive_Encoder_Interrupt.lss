
Drive_Encoder_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da5  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c39  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ad  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__vector_1>
   6:	00 00       	nop
   8:	97 c0       	rjmp	.+302    	; 0x138 <__vector_2>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	9c d0       	rcall	.+312    	; 0x23e <main>
 106:	a7 c0       	rjmp	.+334    	; 0x256 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <port_init>:
	EIMSK|=(1<<eint_pin);
}

void eint_dis(int eint_pin)
{
	EIMSK&=(~(1<<eint_pin));
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 110:	1a b8       	out	0x0a, r1	; 10
 112:	8b b9       	out	0x0b, r24	; 11
 114:	08 95       	ret

00000116 <eint_init>:
 116:	e9 e6       	ldi	r30, 0x69	; 105
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <eint_en>:
 122:	9d b3       	in	r25, 0x1d	; 29
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <eint_en+0xc>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <eint_en+0x8>
 132:	29 2b       	or	r18, r25
 134:	2d bb       	out	0x1d, r18	; 29
 136:	08 95       	ret

00000138 <__vector_2>:
}

ISR(INT1_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	if (PIND & 0x02)
 146:	49 9b       	sbis	0x09, 1	; 9
 148:	07 c0       	rjmp	.+14     	; 0x158 <__vector_2+0x20>
	{
		pulse_A=1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <pulse_A+0x1>
 152:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <pulse_A>
 156:	04 c0       	rjmp	.+8      	; 0x160 <__vector_2+0x28>
	}
	else
	{
		pulse_A=0;	
 158:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <pulse_A+0x1>
 15c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <pulse_A>
	}
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_1>:

ISR(INT0_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
	if (PIND & 0x01)
 17c:	48 9b       	sbis	0x09, 0	; 9
 17e:	07 c0       	rjmp	.+14     	; 0x18e <__vector_1+0x20>
	{
		pulse_B=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <pulse_B+0x1>
 188:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <pulse_B>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__vector_1+0x28>
	}
	else
	{
		pulse_B=0;
 18e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <pulse_B+0x1>
 192:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <pulse_B>
	}
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <drive_encoder>:


void drive_encoder()
{
	eint_en(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	bc df       	rcall	.-136    	; 0x122 <eint_en>
	eint_en(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	b9 df       	rcall	.-142    	; 0x122 <eint_en>
	
	if (i==0)
 1b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 1b8:	89 2b       	or	r24, r25
 1ba:	81 f5       	brne	.+96     	; 0x21c <drive_encoder+0x78>
	{
		if (pulse_A==0|| pulse_B==0)
 1bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pulse_A>
 1c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pulse_A+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <drive_encoder+0x30>
 1c8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <pulse_B>
 1cc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <pulse_B+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	21 f5       	brne	.+72     	; 0x21c <drive_encoder+0x78>
		{
			i=1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 1dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
			if (pulse_A==0)
 1e0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pulse_A>
 1e4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pulse_A+0x1>
 1e8:	89 2b       	or	r24, r25
 1ea:	49 f4       	brne	.+18     	; 0x1fe <drive_encoder+0x5a>
			{
				disp++;
 1ec:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <disp>
 1f0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disp+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <disp+0x1>
 1fa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <disp>
			}
			if (pulse_B==0)
 1fe:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <pulse_B>
 202:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <pulse_B+0x1>
 206:	89 2b       	or	r24, r25
 208:	49 f4       	brne	.+18     	; 0x21c <drive_encoder+0x78>
			{
					disp--;
 20a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <disp>
 20e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disp+0x1>
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <disp+0x1>
 218:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <disp>
			}
		}
	} 
	if (pulse_A==1 && pulse_B==1)
 21c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pulse_A>
 220:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pulse_A+0x1>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	51 f4       	brne	.+20     	; 0x23c <drive_encoder+0x98>
 228:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <pulse_B>
 22c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <pulse_B+0x1>
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	21 f4       	brne	.+8      	; 0x23c <drive_encoder+0x98>
	{
		i=0;
 234:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 238:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 23c:	08 95       	ret

0000023e <main>:
//variable for drive_encoder
volatile int pulse_A=0,pulse_B=0,disp=0,i=0;

int main(void)
{
	sei();
 23e:	78 94       	sei
	port_init();
 240:	64 df       	rcall	.-312    	; 0x10a <port_init>
	eint_init();
 242:	69 df       	rcall	.-302    	; 0x116 <eint_init>
 244:	c8 e0       	ldi	r28, 0x08	; 8

    while (1) 
    {
		drive_encoder();			
		indicator_1=disp;
 246:	d1 e0       	ldi	r29, 0x01	; 1
	port_init();
	eint_init();

    while (1) 
    {
		drive_encoder();			
 248:	ad df       	rcall	.-166    	; 0x1a4 <drive_encoder>
 24a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <disp>
		indicator_1=disp;
 24e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disp+0x1>
 252:	88 83       	st	Y, r24
 254:	f9 cf       	rjmp	.-14     	; 0x248 <main+0xa>

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>

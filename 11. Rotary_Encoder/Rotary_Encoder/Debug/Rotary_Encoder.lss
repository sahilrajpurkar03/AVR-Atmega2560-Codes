
Rotary_Encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800200  00800200  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d38  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0b  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  00001c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000202c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000072  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 30       	cpi	r26, 0x06	; 6
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	79 d0       	rcall	.+242    	; 0x1f8 <main>
 106:	89 c0       	rjmp	.+274    	; 0x21a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <port_init>:
    }
}

void port_init()
{
	DDRK=0xFF;				//indicator_1
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	DDRF=0x00;				//Rotary_Encoder
 110:	10 ba       	out	0x10, r1	; 16
 112:	08 95       	ret

00000114 <ADC_initiate>:
	preA = curA;
}

void ADC_initiate()
{
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);  // AVcc //  right adjusted
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN)|(0<<ADATE)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // bit4 ADC EOC flag // prescalar- 111 - 128 division factor
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = 0x00;
 120:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 124:	08 95       	ret

00000126 <ADC_read>:
}

uint16_t ADC_read(uint8_t ch)
{
	ADMUX = ADMUX & 0b11100000;    //Clearing all the mux;
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	90 7e       	andi	r25, 0xE0	; 224
 12e:	90 83       	st	Z, r25
	ADCSRB = ADCSRB & 0b11110111;  //------"-"-----------
 130:	eb e7       	ldi	r30, 0x7B	; 123
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	97 7f       	andi	r25, 0xF7	; 247
 138:	90 83       	st	Z, r25
	ch = ch & 0b00001111;
 13a:	98 2f       	mov	r25, r24
 13c:	9f 70       	andi	r25, 0x0F	; 15
	if ( ch <= 7 )
 13e:	98 30       	cpi	r25, 0x08	; 8
 140:	48 f4       	brcc	.+18     	; 0x154 <ADC_read+0x2e>
	{
		ch = ch & 0b00000111; //
		ADMUX = ADMUX | ch;
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	87 70       	andi	r24, 0x07	; 7
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
		ADCSRB=0x00;
 14e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 152:	0c c0       	rjmp	.+24     	; 0x16c <ADC_read+0x46>
	}
	else
	{
		ch = ch-8;
		ch = ch & 0b00000111;
		ADMUX = ADMUX | ch;
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	97 70       	andi	r25, 0x07	; 7
 15c:	98 2b       	or	r25, r24
 15e:	90 83       	st	Z, r25
		ADCSRB=0x00;
 160:	eb e7       	ldi	r30, 0x7B	; 123
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	10 82       	st	Z, r1
		ADCSRB = ADCSRB | (1<<MUX5);
 166:	80 81       	ld	r24, Z
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	80 83       	st	Z, r24
	}
	
	ADCSRA = ADCSRA | (1<<ADSC);    //Bit 6 to start conversion-ADSC
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24
	
	while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
 176:	80 81       	ld	r24, Z
 178:	84 ff       	sbrs	r24, 4
 17a:	fd cf       	rjmp	.-6      	; 0x176 <ADC_read+0x50>
	
	return(ADC);
 17c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 180:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
 184:	08 95       	ret

00000186 <Endcoder_Start>:
	DDRF=0x00;				//Rotary_Encoder
}

void Endcoder_Start()
{
	curA=ADC_read(1);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	ce df       	rcall	.-100    	; 0x126 <ADC_read>
 18a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <curA+0x1>
 18e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <curA>

	disp1+= curA - preA;
 192:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <preA>
 196:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <preA+0x1>
 19a:	ac 01       	movw	r20, r24
 19c:	42 1b       	sub	r20, r18
 19e:	53 0b       	sbc	r21, r19
 1a0:	9a 01       	movw	r18, r20
 1a2:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_edata>
 1a6:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_edata+0x1>
	if(curA - preA <=-150)
 1aa:	2b 36       	cpi	r18, 0x6B	; 107
 1ac:	6f ef       	ldi	r22, 0xFF	; 255
 1ae:	36 07       	cpc	r19, r22
 1b0:	3c f0       	brlt	.+14     	; 0x1c0 <Endcoder_Start+0x3a>

void Endcoder_Start()
{
	curA=ADC_read(1);

	disp1+= curA - preA;
 1b2:	42 0f       	add	r20, r18
 1b4:	53 1f       	adc	r21, r19
 1b6:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <_edata+0x1>
 1ba:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <_edata>
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <Endcoder_Start+0x46>
	if(curA - preA <=-150)
	{
		disp1 -= (curA-preA);
		disp1++;
 1c0:	4f 5f       	subi	r20, 0xFF	; 255
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
 1c4:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <_edata+0x1>
 1c8:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <_edata>
	}
	if(curA - preA >=150)
 1cc:	26 39       	cpi	r18, 0x96	; 150
 1ce:	31 05       	cpc	r19, r1
 1d0:	74 f0       	brlt	.+28     	; 0x1ee <Endcoder_Start+0x68>
	{
		
		disp1 -= (curA-preA);
		disp1--;
 1d2:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <_edata>
 1d6:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <_edata+0x1>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 1b       	sub	r22, r18
 1de:	73 0b       	sbc	r23, r19
 1e0:	9b 01       	movw	r18, r22
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	31 09       	sbc	r19, r1
 1e6:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <_edata+0x1>
 1ea:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <_edata>
	}
	preA = curA;
 1ee:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <preA+0x1>
 1f2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <preA>
 1f6:	08 95       	ret

000001f8 <main>:
//Variable for Encoder
int curA=0,preA=0,disp1=0;

int main(void)
{
	port_init();
 1f8:	88 df       	rcall	.-240    	; 0x10a <port_init>
	ADC_initiate();
 1fa:	8c df       	rcall	.-232    	; 0x114 <ADC_initiate>
	preA=ADC_read(1);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	93 df       	rcall	.-218    	; 0x126 <ADC_read>
 200:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <preA+0x1>
 204:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <preA>
 208:	00 e0       	ldi	r16, 0x00	; 0
    
	while (1) 
    {
		Endcoder_Start();
		indicator_1=disp1;
 20a:	12 e0       	ldi	r17, 0x02	; 2
 20c:	c8 e0       	ldi	r28, 0x08	; 8
 20e:	d1 e0       	ldi	r29, 0x01	; 1
	ADC_initiate();
	preA=ADC_read(1);
    
	while (1) 
    {
		Endcoder_Start();
 210:	ba df       	rcall	.-140    	; 0x186 <Endcoder_Start>
 212:	f8 01       	movw	r30, r16
		indicator_1=disp1;
 214:	80 81       	ld	r24, Z
 216:	88 83       	st	Y, r24
 218:	fb cf       	rjmp	.-10     	; 0x210 <main+0x18>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
